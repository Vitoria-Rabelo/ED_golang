{
    "title": "@manipulacao: Estressados Opera\u00e7\u00f5es III",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@manipulacao: Estressados Opera\u00e7\u00f5es III</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"estressados-opera\u00e7\u00f5es-iii\">Estressados Opera\u00e7\u00f5es III</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#guide\">Guide</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/manipulacao/cover.jpg\"\nalt=\"cover\" />\n<figcaption aria-hidden=\"true\">cover</figcaption>\n</figure>\n<hr />\n<h2 id=\"intro\">Intro</h2>\n<h3 id=\"filter\">filter</h3>\n<ul>\n<li><strong>get_men</strong>: retorne uma lista com os homens.</li>\n<li><strong>get_calm_women</strong>: retorne uma lista com as mulheres\nstress menor que 10.</li>\n</ul>\n<h3 id=\"sort\">sort</h3>\n<ul>\n<li><strong>sort</strong>: ordene a lista pelo valor real</li>\n<li><strong>sort_stress</strong>: ordene a lista por n\u00edvel de\nstress</li>\n</ul>\n<h3 id=\"reverse\">reverse</h3>\n<ul>\n<li><strong>reverse</strong>: fa\u00e7a uma fun\u00e7\u00e3o que n\u00e3o altere a lista\noriginal, mas retorne uma nova lista invertida</li>\n</ul>\n<h3 id=\"set-e-map\">set e map</h3>\n<ul>\n<li><strong>unicos</strong>: retorne uma nova lista sem repeti\u00e7\u00e3o de\nvalores</li>\n<li><strong>repetidos</strong>: retorne uma nova lista apenas com os\nvalores repetidos</li>\n</ul>\n<hr />\n<h2 id=\"guide\">Guide</h2>\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft.cpp\">solver.cpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft.ts\">solver.ts</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/manipulacao/.cache/draft.java\">solver.java</a></li>\n</ul>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE get_men</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$get_men</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,</span><span class=\"pp\">-</span><span class=\"ss\">3,4</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 2, 4]</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$get_men</span> <span class=\"pp\">[</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">2,3,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3, 5]</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$get_men</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">2,</span><span class=\"pp\">-</span><span class=\"ss\">5,</span><span class=\"pp\">-</span><span class=\"ss\">9</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE get_calm_women</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$get_calm_women</span> <span class=\"pp\">[-</span><span class=\"ss\">10,</span><span class=\"pp\">-</span><span class=\"ss\">5,6,</span><span class=\"pp\">-</span><span class=\"ss\">90</span><span class=\"pp\">]</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-5]</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$get_calm_women</span> <span class=\"pp\">[-</span><span class=\"ss\">1,5,</span><span class=\"pp\">-</span><span class=\"ss\">11,</span><span class=\"pp\">-</span><span class=\"ss\">99,</span><span class=\"pp\">-</span><span class=\"ss\">8</span><span class=\"pp\">]</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-1,</span> <span class=\"at\">-8]</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE sort</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$sort</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-99,</span> <span class=\"at\">-50,</span> <span class=\"at\">-1,</span> <span class=\"at\">-1,</span> 3, 5]</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$sort</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,12,8,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99,</span><span class=\"pp\">-</span><span class=\"ss\">444</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-444,</span> <span class=\"at\">-99,</span> <span class=\"at\">-50,</span> <span class=\"at\">-1,</span> <span class=\"at\">-1,</span> 8, 12]</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE sort_stress</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$sort_stress</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-1,</span> <span class=\"at\">-1,</span> 3, 5, <span class=\"at\">-50,</span> <span class=\"at\">-99]</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$sort_stress</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,12,8,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99,</span><span class=\"pp\">-</span><span class=\"ss\">444</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-1,</span> <span class=\"at\">-1,</span> 8, 12, <span class=\"at\">-50,</span> <span class=\"at\">-99,</span> <span class=\"at\">-444]</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE reverse</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reverse</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">50,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">99</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[-99,</span> <span class=\"at\">-1,</span> <span class=\"at\">-50,</span> <span class=\"at\">-1,</span> 3, 5]</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$reverse</span> []</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE unique</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$unique</span> <span class=\"pp\">[</span><span class=\"ss\">1,1,1</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1]</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$unique</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,1,1,3,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[5,</span> 3, 1, 2]</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$unique</span> <span class=\"pp\">[</span><span class=\"ss\">5,4,3,2,1</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[5,</span> 4, 3, 2, 1]</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE repeated</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$repeated</span> <span class=\"pp\">[</span><span class=\"ss\">1,1,1</span><span class=\"pp\">]</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 1]</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$repeated</span> <span class=\"pp\">[</span><span class=\"ss\">5,3,1,1,3,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3]</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$repeated</span> <span class=\"pp\">[</span><span class=\"ss\">5,4,3,2,1</span><span class=\"pp\">]</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT get_men\nget_men [1,2,-3,4]\nget_men [1,-2,3,5]\nget_men [-1,-2,-5,-9]\nend\n======== EXPECT\n$get_men [1,2,-3,4]\n[1, 2, 4]\n$get_men [1,-2,3,5]\n[1, 3, 5]\n$get_men [-1,-2,-5,-9]\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT get_calm_women\nget_calm_women [-10,-5,6,-90]\nget_calm_women [-1,5,-11,-99,-8]\nend\n======== EXPECT\n$get_calm_women [-10,-5,6,-90]\n[-5]\n$get_calm_women [-1,5,-11,-99,-8]\n[-1, -8]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sort\nsort [5,3,-1,-50,-1,-99]\nsort [-1,-50,12,8,-1,-99,-444]\nend\n======== EXPECT\n$sort [5,3,-1,-50,-1,-99]\n[-99, -50, -1, -1, 3, 5]\n$sort [-1,-50,12,8,-1,-99,-444]\n[-444, -99, -50, -1, -1, 8, 12]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT sort_stress\nsort_stress [5,3,-1,-50,-1,-99]\nsort_stress [-1,-50,12,8,-1,-99,-444]\nend\n======== EXPECT\n$sort_stress [5,3,-1,-50,-1,-99]\n[-1, -1, 3, 5, -50, -99]\n$sort_stress [-1,-50,12,8,-1,-99,-444]\n[-1, -1, 8, 12, -50, -99, -444]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT reverse\nreverse [5,3,-1,-50,-1,-99]\nreverse []\nend\n======== EXPECT\n$reverse [5,3,-1,-50,-1,-99]\n[-99, -1, -50, -1, 3, 5]\n$reverse []\n[]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT unique\nunique [1,1,1]\nunique [5,3,1,1,3,2]\nunique [5,4,3,2,1]\nend\n======== EXPECT\n$unique [1,1,1]\n[1]\n$unique [5,3,1,1,3,2]\n[5, 3, 1, 2]\n$unique [5,4,3,2,1]\n[5, 4, 3, 2, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT repeated\nrepeated [1,1,1]\nrepeated [5,3,1,1,3,2]\nrepeated [5,4,3,2,1]\nend\n======== EXPECT\n$repeated [1,1,1]\n[1, 1]\n$repeated [5,3,1,1,3,2]\n[1, 3]\n$repeated [5,4,3,2,1]\n[]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "const input = () => \"\"; \nexport {};\n\nfunction get_men(vet: number[]): number[] {\n    return [];\n}\n\nfunction get_calm_women(vet: number[]): number[] {\n    return [];\n}\n\nfunction sort(vet: number[]): number[] {\n    return [];\n}\n\nfunction sort_stress(vet: number[]): number[] {\n    return [];\n}\n\nfunction reverse(vet: number[]): number[] {\n    return [];\n}\n\nfunction unique(vet: number[]): number[] {\n    return [];\n}\n\nfunction repeated(vet: number[]): number[] {\n    return [];\n}\n\n\nfunction main() {\n    let vet = new Array<string>();\n\n    while (true) {\n        let line = input();\n        console.log(\"$\", line);\n        let args = line.split(\" \");\n\n        if      (args[0] === \"end\")             { break;                                                       }\n        else if (args[0] === \"get_men\")         { console.log(fmt(get_men(       to_vet(args[1])))); }\n        else if (args[0] === \"get_calm_women\")  { console.log(fmt(get_calm_women(to_vet(args[1])))); }\n        else if (args[0] === \"sort\")            { console.log(fmt(sort(          to_vet(args[1])))); }\n        else if (args[0] === \"sort_stress\")     { console.log(fmt(sort_stress(   to_vet(args[1])))); }\n        else if (args[0] === \"reverse\")         { console.log(fmt(reverse(       to_vet(args[1])))); }\n        else if (args[0] === \"unique\")          { console.log(fmt(unique(        to_vet(args[1])))); }\n        else if (args[0] === \"repeated\")        { console.log(fmt(repeated(      to_vet(args[1])))); }\n        else                                    { console.log(\"fail: comando invalido\");                             }\n    }\n}\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n\n//Converte de vetor para string sem inserir os espa\u00e7os\n//[1, 2, 3, 4] => \"[1,2,3,4]\"\nfunction fmt(vet: number[]): string {\n    if (vet == null) {\n        return \"[]\";\n    }\n    return \"[\" + vet.join(\", \") + \"]\";\n}\n\nmain()\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Shell {\n    static List<Integer> get_men(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> get_calm_women(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> sort(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> sort_stress(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> reverse(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static void reverse_inplace(List<Integer> vet) {\n    }\n\n    static boolean exists(List<Integer> vet, int value) {\n        return false;\n    }\n\n    static List<Integer> unique(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    static List<Integer> repeated(List<Integer> vet) {\n        return new ArrayList<>();\n    }\n\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            var args = line.split(\" \");\n            var cmd = args[0];\n            System.out.println(\"$\" + line);\n\n            if (cmd.equals(\"end\")) {\n                break;\n            } else if (cmd.equals(\"get_men\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + get_men(array));\n            } else if (cmd.equals(\"get_calm_women\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + get_calm_women(array));\n            } else if (cmd.equals(\"sort\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + sort(array));\n            } else if (cmd.equals(\"sort_stress\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + sort_stress(array));\n            } else if (cmd.equals(\"reverse\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + reverse(array));\n            } else if (cmd.equals(\"reverse_inplace\")) {\n                var array = strToVet(args[1]);\n                reverse_inplace(array);\n                System.out.println(\"\" + array);\n            } else if (cmd.equals(\"exists\")) {\n                var array = strToVet(args[1]);\n                var value = Integer.parseInt(args[2]);\n                System.out.println(\"\" + exists(array, value));\n            } else if (cmd.equals(\"unique\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + unique(array));\n            } else if (cmd.equals(\"repeated\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + repeated(array));\n            } else {\n                System.out.println(\"Invalid command\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if (s.equals(\"[]\"))\n            return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "encoding": 0
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <sstream>\n\nstd::vector<int> get_men(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> get_calm_women(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> sort(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> sort_stress(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> reverse(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nvoid reverse_inplace(std::vector<int> &vet) {\n    (void) vet;\n}\n\nstd::vector<int> unique(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::vector<int> repeated(std::vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nstd::string input() {\n    std::string line;\n    std::getline(std::cin, line);\n    return line;\n}\n\ntemplate <typename T>\nvoid print(T t) {\n    std::cout << t << std::endl;\n}\n\nvoid print(std::vector<int> vet) {\n    std::cout << '[';\n    for (int i = 0; i < (int) vet.size(); i++) {\n        std::cout << (i == 0 ? \"\" : \", \");\n        std::cout << vet[i];\n    }\n    std::cout << ']' << std::endl;\n}\n\nstd::vector<std::string> split(const std::string &s, char delim) {\n    std::vector<std::string> elems;\n    std::string elem;\n    for (auto c : s) {\n        if (c == delim) {\n            elems.push_back(elem);\n            elem.clear();\n        } else {\n            elem += c;\n        }\n    }\n    elems.push_back(elem);\n    return elems;\n}\n\nstd::vector<int> str2vet(std::string s) {\n    s = s.substr(1, s.size() - 2);\n    std::vector<int> vet;\n    std::stringstream ss(s);\n    std::string elem;\n    while (std::getline(ss, elem, ',')) {\n        vet.push_back(std::stoi(elem));\n    }\n    return vet;\n}\n\nint main() {\n    \n    while(true) {\n        std::string line = input();\n        auto args = split(line, ' ');\n        print('$' + line);\n\n        if     (args[0] == \"get_men\"        ) { print(get_men(str2vet(args[1])));        }\n        else if(args[0] == \"get_calm_women\" ) { print(get_calm_women(str2vet(args[1]))); }\n        else if(args[0] == \"sort\"           ) { print(sort(str2vet(args[1])));           }\n        else if(args[0] == \"sort_stress\"    ) { print(sort_stress(str2vet(args[1])));    }\n        else if(args[0] == \"reverse\"        ) { print(reverse(str2vet(args[1])));        }\n        else if(args[0] == \"reverse_inplace\") { \n            auto vet = str2vet(args[1]);\n            reverse_inplace(vet);\n            print(vet);\n        }\n        else if(args[0] == \"unique\"         ) { print(unique(str2vet(args[1])));         }\n        else if(args[0] == \"repeated\"       ) { print(repeated(str2vet(args[1])));       }\n        else if(args[0] == \"end\"            ) { break;                                   }\n    }\n}\n",
                "encoding": 0
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc getMen(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc getCalmWomen(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc sortVet(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc sortStress(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc reverse(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc reverseInplace(vet []int) {\n\t_ = vet\n}\nfunc unique(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc repeated(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Print(\"$\")\n\t\tline := scanner.Text()\n\t\targs := strings.Split(line, \" \")\n\t\tfmt.Println(line)\n\n\t\tswitch args[0] {\n\t\tcase \"get_men\":\n\t\t\tprintVec(getMen(str2vet(args[1])))\n\t\tcase \"get_calm_women\":\n\t\t\tprintVec(getCalmWomen(str2vet(args[1])))\n\t\tcase \"sort\":\n\t\t\tprintVec(sortVet(str2vet(args[1])))\n\t\tcase \"sort_stress\":\n\t\t\tprintVec(sortStress(str2vet(args[1])))\n\t\tcase \"reverse\":\n\t\t\tprintVec(reverse(str2vet(args[1])))\n\t\tcase \"reverse_inplace\":\n\t\t\tvet := str2vet(args[1])\n\t\t\treverseInplace(vet)\n\t\t\tprintVec(vet)\n\t\tcase \"unique\":\n\t\t\tprintVec(unique(str2vet(args[1])))\n\t\tcase \"repeated\":\n\t\t\tprintVec(repeated(str2vet(args[1])))\n\t\tcase \"end\":\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc printVec(vet []int) {\n\tfmt.Print(\"[\")\n\tfor i, val := range vet {\n\t\tif i > 0 {\n\t\t\tfmt.Print(\", \")\n\t\t}\n\t\tfmt.Print(val)\n\t}\n\tfmt.Println(\"]\")\n}\n\nfunc str2vet(s string) []int {\n\tif s == \"[]\" {\n\t\treturn nil\n\t}\n\ts = s[1 : len(s)-1]\n\tparts := strings.Split(s, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tn, _ := strconv.Atoi(part)\n\t\tvet = append(vet, n)\n\t}\n\treturn vet\n}\n\n",
                "encoding": 0
            }
        ]
    }
}
