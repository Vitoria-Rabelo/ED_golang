{
    "title": "@especiais: Estressados Opera\u00e7\u00f5es IV",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@especiais: Estressados Opera\u00e7\u00f5es IV</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"estressados-opera\u00e7\u00f5es-iv\">Estressados Opera\u00e7\u00f5es IV</h1>\n<!-- toch -->\n<table>\n<thead>\n<tr class=\"header\">\n<th><a href=\"#intro\">Intro</a></th>\n<th><a href=\"#draft\">Draft</a></th>\n<th><a href=\"#shell\">Shell</a></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<!-- toch -->\n<figure>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodepoo/arcade/master/base/especiais/cover.jpg\"\nalt=\"cover\" />\n<figcaption aria-hidden=\"true\">cover</figcaption>\n</figure>\n<hr />\n<h2 id=\"intro\">Intro</h2>\n<h3 id=\"pares\">pares</h3>\n<ul>\n<li><strong>occurr</strong>: Fa\u00e7a uma contagem de quantas vezes cada\nn\u00edvel de stress aparece e retorne essa contagem ordenado pelo n\u00edvel de\nstress.</li>\n<li><strong>times</strong> Uma ou mais pessoas de mesmo stress seguidas\nformam um time. Gere um vetor compactado indicando o n\u00edvel de stress e\nquantas pessoas tem em cada time?</li>\n</ul>\n<h3 id=\"proximidade\">proximidade</h3>\n<ul>\n<li><strong>mnext</strong>: Apresente um mapa colocando 1 nas posi\u00e7\u00f5es\nque existem homens ao lado de pelo menos uma mulher.</li>\n<li><strong>alone</strong>: quais posi\u00e7\u00f5es existem homens que n\u00e3o est\u00e3o\ndo lado de nenhuma mulher?</li>\n</ul>\n<h3 id=\"duplo-for\">duplo for</h3>\n<ul>\n<li><strong>couple</strong>: Casais s\u00e3o formados quando quando um homem\ne uma mulher com o mesmo n\u00edvel de stress se encontram. Retorne a\nquantidade de casais que podem ser formados.</li>\n<li><strong>subseq</strong>: Dada uma sequ\u00eancia de valores, procure essa\nsequ\u00eancia na fila e retorne a primeira posi\u00e7\u00e3o onde ela come\u00e7ar.</li>\n</ul>\n<h3 id=\"remo\u00e7\u00f5es\">remo\u00e7\u00f5es</h3>\n<ul>\n<li><strong>clear</strong>: dado um valor, remova todas as vezes que\nesse valor aparece na lista.</li>\n<li><strong>erase</strong>: dado a lista com os \u00edndices de todas as\npessoas que sa\u00edram da fila, qual a fila resultante?</li>\n</ul>\n<hr />\n<h2 id=\"draft\">Draft</h2>\n<ul>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/especiais/.cache/draft.cpp\">solver.cpp</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/especiais/.cache/draft.java\">solver.java</a></li>\n<li><a\nhref=\"https://github.com/qxcodepoo/arcade/blob/master/base/especiais/.cache/draft.ts\">solver.ts</a></li>\n</ul>\n<h2 id=\"shell\">Shell</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE occur</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$occurr</span> <span class=\"pp\">[</span><span class=\"ss\">1,3,</span><span class=\"pp\">-</span><span class=\"ss\">1</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">1,</span> 2<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">3,</span> 1<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$occurr</span> <span class=\"pp\">[-</span><span class=\"ss\">2,1,</span><span class=\"pp\">-</span><span class=\"ss\">2,4</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">1,</span> 1<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">2,</span> 2<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">4,</span> 1<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$occurr</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,5,9,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">1,5,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">1,</span> 3<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">2,</span> 1<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">5,</span> 3<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">9,</span> 1<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE teams</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$teams</span> []</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$teams</span> <span class=\"pp\">[</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">5,</span> 1<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$teams</span> <span class=\"pp\">[</span><span class=\"ss\">5,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">5,</span> 2<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$teams</span> <span class=\"pp\">[</span><span class=\"ss\">3,5,5,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">3,</span> 1<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">5,</span> 3<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$teams</span> <span class=\"pp\">[</span><span class=\"ss\">5,5,2,2,2,4,4</span><span class=\"pp\">]</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">5,</span> 2<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">2,</span> 3<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">4,</span> 2<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$teams</span> <span class=\"pp\">[</span><span class=\"ss\">5,5,7,1,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[</span><span class=\"er\">(</span><span class=\"ex\">5,</span> 2<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">7,</span> 1<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">1,</span> 1<span class=\"kw\">)</span><span class=\"ex\">,</span> <span class=\"er\">(</span><span class=\"ex\">5,</span> 1<span class=\"kw\">)</span><span class=\"ex\">]</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE mnext</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$mnext</span> <span class=\"pp\">[</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0]</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$mnext</span> <span class=\"pp\">[</span><span class=\"ss\">5,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0,</span> 0]</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$mnext</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">3,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0,</span> 0, 1]</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$mnext</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,5,9,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">1,5,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0,</span> 0, 0, 1, 0, 0, 1, 0]</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE alone</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$alone</span> <span class=\"pp\">[</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1]</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$alone</span> <span class=\"pp\">[</span><span class=\"ss\">5,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 1]</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$alone</span> <span class=\"pp\">[-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">3,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0,</span> 0, 0]</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$alone</span> <span class=\"pp\">[</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">3,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0,</span> 0, 0]</span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$alone</span> <span class=\"pp\">[-</span><span class=\"ss\">1,3,</span><span class=\"pp\">-</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[0,</span> 0, 0]</span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$alone</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,5,9,</span><span class=\"pp\">-</span><span class=\"ss\">1,</span><span class=\"pp\">-</span><span class=\"ss\">1,5,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 1, 1, 0, 0, 0, 0, 1]</span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE couple</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[</span><span class=\"ss\">5,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[</span><span class=\"ss\">5,</span><span class=\"pp\">-</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[-</span><span class=\"ss\">5,</span><span class=\"pp\">-</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[-</span><span class=\"ss\">5,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[-</span><span class=\"ss\">5,5,</span><span class=\"pp\">-</span><span class=\"ss\">5,</span><span class=\"pp\">-</span><span class=\"ss\">5</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[</span><span class=\"ss\">2,</span><span class=\"pp\">-</span><span class=\"ss\">2,4,2,</span><span class=\"pp\">-</span><span class=\"ss\">4,</span><span class=\"pp\">-</span><span class=\"ss\">4</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-15\"><a href=\"#cb5-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">2</span></span>\n<span id=\"cb5-16\"><a href=\"#cb5-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$couple</span> <span class=\"pp\">[</span><span class=\"ss\">2,</span><span class=\"pp\">-</span><span class=\"ss\">2,4,2,</span><span class=\"pp\">-</span><span class=\"ss\">4,</span><span class=\"pp\">-</span><span class=\"ss\">4,4</span><span class=\"pp\">]</span></span>\n<span id=\"cb5-17\"><a href=\"#cb5-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span></span>\n<span id=\"cb5-18\"><a href=\"#cb5-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE subseq</span></span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,4,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">8</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,4,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">0</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,4,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">2,4,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">3,5,5,5</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">5,5</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">1</span></span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">5,5,2,2,2,4,4</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">2,2,4</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">3</span></span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">5,5,2,2,2,4,4</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">2,2,4,4,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">5,5,2,2,2,4,4</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">9</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$subseq</span> <span class=\"pp\">[</span><span class=\"ss\">5,5,2,2,2,4,4</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">4,4,4</span><span class=\"pp\">]</span></span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">-1</span></span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE erase</span></span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,4,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">0,1,2,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,4,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">1,2</span><span class=\"pp\">]</span></span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3]</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,4,3</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">2,1,3</span><span class=\"pp\">]</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1]</span></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$erase</span> <span class=\"pp\">[</span><span class=\"ss\">3,5,5,5</span><span class=\"pp\">]</span> <span class=\"pp\">[</span><span class=\"ss\">3</span><span class=\"pp\">]</span></span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3,</span> 5, 5]</span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode sh\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#TEST_CASE clear</span></span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span> <span class=\"pp\">[</span><span class=\"ss\">2,2,2,2,2</span><span class=\"pp\">]</span> 2</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[]</span></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,4,3</span><span class=\"pp\">]</span> 1</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[2,</span> 4, 3]</span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span> <span class=\"pp\">[</span><span class=\"ss\">1,2,2,3,2,2</span><span class=\"pp\">]</span> 2</span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[1,</span> 3]</span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$clear</span> <span class=\"pp\">[</span><span class=\"ss\">5,5,3,5,5,5</span><span class=\"pp\">]</span> 5</span>\n<span id=\"cb8-9\"><a href=\"#cb8-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[3]</span></span>\n<span id=\"cb8-10\"><a href=\"#cb8-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"va\">$end</span></span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT occur\noccurr [1,3,-1]\noccurr [-2,1,-2,4]\noccurr [1,2,5,9,-1,-1,5,5]\nend\n======== EXPECT\n$occurr [1,3,-1]\n[(1, 2), (3, 1)]\n$occurr [-2,1,-2,4]\n[(1, 1), (2, 2), (4, 1)]\n$occurr [1,2,5,9,-1,-1,5,5]\n[(1, 3), (2, 1), (5, 3), (9, 1)]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT teams\nteams []\nteams [5]\nteams [5,5]\nteams [3,5,5,5]\nteams [5,5,2,2,2,4,4]\nteams [5,5,7,1,5]\nend\n======== EXPECT\n$teams []\n[]\n$teams [5]\n[(5, 1)]\n$teams [5,5]\n[(5, 2)]\n$teams [3,5,5,5]\n[(3, 1), (5, 3)]\n$teams [5,5,2,2,2,4,4]\n[(5, 2), (2, 3), (4, 2)]\n$teams [5,5,7,1,5]\n[(5, 2), (7, 1), (1, 1), (5, 1)]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT mnext\nmnext [5]\nmnext [5,2]\nmnext [-1,-3,5]\nmnext [1,2,5,9,-1,-1,5,5]\nend\n======== EXPECT\n$mnext [5]\n[0]\n$mnext [5,2]\n[0, 0]\n$mnext [-1,-3,5]\n[0, 0, 1]\n$mnext [1,2,5,9,-1,-1,5,5]\n[0, 0, 0, 1, 0, 0, 1, 0]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT alone\nalone [5]\nalone [5,3]\nalone [-1,-3,5]\nalone [1,-3,5]\nalone [-1,3,-5]\nalone [1,2,5,9,-1,-1,5,5]\nend\n======== EXPECT\n$alone [5]\n[1]\n$alone [5,3]\n[1, 1]\n$alone [-1,-3,5]\n[0, 0, 0]\n$alone [1,-3,5]\n[0, 0, 0]\n$alone [-1,3,-5]\n[0, 0, 0]\n$alone [1,2,5,9,-1,-1,5,5]\n[1, 1, 1, 0, 0, 0, 0, 1]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT couple\ncouple [5]\ncouple [5,3]\ncouple [5,-5]\ncouple [-5,-5]\ncouple [-5,5]\ncouple [-5,5,-5,-5]\ncouple [2,-2,4,2,-4,-4]\ncouple [2,-2,4,2,-4,-4,4]\nend\n======== EXPECT\n$couple [5]\n0\n$couple [5,3]\n0\n$couple [5,-5]\n1\n$couple [-5,-5]\n0\n$couple [-5,5]\n1\n$couple [-5,5,-5,-5]\n1\n$couple [2,-2,4,2,-4,-4]\n2\n$couple [2,-2,4,2,-4,-4,4]\n3\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT subseq\nsubseq [1,2,4,3] [8]\nsubseq [1,2,4,3] [1,2]\nsubseq [1,2,4,3] [2,4,3]\nsubseq [3,5,5,5] [5,5]\nsubseq [5,5,2,2,2,4,4] [2,2,4]\nsubseq [5,5,2,2,2,4,4] [2,2,4,4,3]\nsubseq [5,5,2,2,2,4,4] [9]\nsubseq [5,5,2,2,2,4,4] [4,4,4]\nend\n======== EXPECT\n$subseq [1,2,4,3] [8]\n-1\n$subseq [1,2,4,3] [1,2]\n0\n$subseq [1,2,4,3] [2,4,3]\n1\n$subseq [3,5,5,5] [5,5]\n1\n$subseq [5,5,2,2,2,4,4] [2,2,4]\n3\n$subseq [5,5,2,2,2,4,4] [2,2,4,4,3]\n-1\n$subseq [5,5,2,2,2,4,4] [9]\n-1\n$subseq [5,5,2,2,2,4,4] [4,4,4]\n-1\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT erase\nerase [1,2,4,3] [0,1,2,3]\nerase [1,2,4,3] [1,2]\nerase [1,2,4,3] [2,1,3]\nerase [3,5,5,5] [3]\nend\n======== EXPECT\n$erase [1,2,4,3] [0,1,2,3]\n[]\n$erase [1,2,4,3] [1,2]\n[1, 3]\n$erase [1,2,4,3] [2,1,3]\n[1]\n$erase [3,5,5,5] [3]\n[3, 5, 5]\n$end\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT clear\nclear [2,2,2,2,2] 2\nclear [1,2,4,3] 1\nclear [1,2,2,3,2,2] 2\nclear [5,5,3,5,5,5] 5\nend\n======== EXPECT\n$clear [2,2,2,2,2] 2\n[]\n$clear [1,2,4,3] 1\n[2, 4, 3]\n$clear [1,2,2,3,2,2] 2\n[1, 3]\n$clear [5,5,3,5,5,5] 5\n[3]\n$end\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "ts": [
            {
                "name": "shell.ts",
                "contents": "//retorna um vetor de pares\nfunction occurr(vet: number[]): number[][] {\n    return [];\n}\n\n//retorna um vetor de pares\nfunction teams(vet: number[]): number[][] {\n    return [];\n}\n\nfunction mnext(vet: number[]): number[] {\n    return [];\n}\n\nfunction alone(vet: number[]): number[] {\n    return [];\n}\n\nfunction couple(vet: number[]): number {\n    return 0;\n}\n\nfunction has_subseq(vet: number[], seq: number[], pos: number): boolean {\n    return true;\n}\n\nfunction subseq(vet: number[], seq: number[]) {\n    return 0;\n}\n\nfunction erase(vet: number[], pos_list: number[]): number[] {\n    return [];\n}\n\nfunction clear(vet: number[], value: number): number[] {\n    return [];\n}\n\n\nconst input = () => \"\"; \nexport {};\n\nfunction main() {\n    while (true) {\n        let line = input();\n        console.log(\"$\" + line);\n        let args = line.split(\" \");\n\n        if      (args[0] === \"end\")   {\n            break; \n        }\n        else if (args[0] === \"occurr\") {\n            console.log(fmtpair(occurr(to_vet(args[1]))));\n        }\n        else if (args[0] === \"teams\") {\n            console.log(fmtpair(teams(to_vet(args[1]))));\n        }\n        else if (args[0] === \"mnext\") {\n            console.log(fmt(mnext(to_vet(args[1]))));\n        }\n        else if (args[0] === \"alone\") {\n            console.log(fmt(alone(to_vet(args[1]))));\n        }\n        else if (args[0] === \"couple\") {\n            console.log(couple(to_vet(args[1])));\n        }\n        else if (args[0] === \"subseq\") {\n            console.log(subseq(to_vet(args[1]), to_vet(args[2])));\n        }\n        else if (args[0] === \"erase\") {\n            console.log(fmt(erase(to_vet(args[1]), to_vet(args[2]))));\n        }\n        else if (args[0] === \"clear\") {\n            console.log(fmt(clear(to_vet(args[1]), +args[2])));\n        }\n        else {\n            console.log(\"Comando invalido\");\n        }\n    }\n}\n\n// Fun\u00e7\u00e3o auxiliar para converter de string para vetor\n// \"[1,2,3,4]\" para [1, 2, 3, 4]\nfunction to_vet(token: string): number[] {\n    let size = token.length;\n    let inside = token.substring(1, size - 1);\n    return inside === \"\" ? [] : inside.split(\",\").map(x => +x)\n}\n\n//Converte de vetor para string sem inserir os espa\u00e7os\n//[1, 2, 3, 4] => \"[1,2,3,4]\"\nfunction fmt(vet: any[]): string {\n    return \"[\" + vet?.join(\", \") + \"]\";\n}\n\nfunction fmtpair(vet: number[][]): string {\n    return fmt(vet?.map((x: number[]) => {\n        let [key, value] = x;\n        return \"(\" + key + \", \" + value + \")\";\n    }));\n}\n\n\nmain()\n",
                "encoding": 0
            }
        ],
        "java": [
            {
                "name": "Shell.java",
                "contents": "import java.util.Scanner;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\n\nclass Pair {\n    Integer first;\n    Integer second;\n\n    Pair(Integer first, Integer second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public String toString() {\n        return \"(\" + first + \", \" + second + \")\";\n    }\n};\n\nclass Student {\n    public static List<Pair> occurr(List<Integer> vet) {\n        return new ArrayList<Pair>();\n    }\n\n    public static List<Pair> teams(List<Integer> vet) {\n        return new ArrayList<Pair>();\n    }\n\n    public static List<Integer> mnext(List<Integer> vet) {\n        return new ArrayList<Integer>();\n    }\n\n    private static boolean hasWoman(List<Integer> vet, int size, int index) {\n        return true;\n    }\n\n    public static List<Integer> alone(List<Integer> vet) {\n        return new ArrayList<Integer>();\n    }\n\n    public static int couple(List<Integer> vet) {\n        return 0;\n    }\n\n    public static boolean hasSubseq(List<Integer> vet, List<Integer> seq, int pos) {\n        return true;\n    }\n\n    public static int subseq(List<Integer> vet, List<Integer> seq) {\n        return -1;\n    }\n\n    public static List<Integer> erase(List<Integer> vet, List<Integer> pos_list) {\n        return new ArrayList<Integer>();\n    }\n\n    public static List<Integer> clear(List<Integer> vet, int value) {\n        return new ArrayList<Integer>();\n    }\n}\n\npublic class Shell {\n    public static void main(String[] _args) {\n        while (true) {\n            var line = scanner.nextLine();\n            var args = line.split(\" \");\n            System.out.println('$' + line);\n\n            if (args[0].equals(\"end\")) {\n                break;\n            }\n            else if (args[0].equals(\"occurr\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.occurr(array));\n            }\n            else if (args[0].equals(\"teams\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.teams(array));\n            }\n            else if (args[0].equals(\"mnext\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.mnext(array));\n            }\n            else if (args[0].equals(\"alone\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.alone(array));\n            }\n            else if (args[0].equals(\"erase\")) {\n                var array = strToVet(args[1]);\n                var positions = strToVet(args[2]);\n                System.out.println(\"\" + Student.erase(array, positions));\n            }\n            else if (args[0].equals(\"clear\")) {\n                var array = strToVet(args[1]);\n                var value = Integer.parseInt(args[2]);\n                System.out.println(\"\" + Student.clear(array, value));\n            }\n            else if (args[0].equals(\"subseq\")) {\n                var array = strToVet(args[1]);\n                var seq = strToVet(args[2]);\n                System.out.println(\"\" + Student.subseq(array, seq));\n            }\n            else if (args[0].equals(\"couple\")) {\n                var array = strToVet(args[1]);\n                System.out.println(\"\" + Student.couple(array));\n            }\n            else {\n                System.out.println(\"Invalid command\");\n            }\n        }\n    }\n\n    public static List<Integer> strToVet(String s) {\n        if (s.equals(\"[]\"))\n            return new ArrayList<>();\n        List<String> parts = Arrays.asList(s.substring(1, s.length() - 1).split(\",\"));\n        List<Integer> result = new ArrayList<>();\n        for (String part : parts)\n            result.add(Integer.parseInt(part.trim()));\n        return result;\n    }\n\n    static Scanner scanner = new Scanner(System.in);\n}\n",
                "encoding": 0
            }
        ],
        "cpp": [
            {
                "name": "shell.cpp",
                "contents": "#include <map>\n#include <algorithm>\n#include <vector>\n#include <sstream>\n#include <iostream>\n\nusing namespace std;\n\nvector<pair<int, int>> occurr(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nvector<pair<int, int>> teams(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nvector<int> mnext(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nvector<int> alone(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nint couple(vector<int> vet) {\n    (void) vet;\n    return {};\n}\n\nbool has_subseq(vector<int> vet, vector<int> seq, int pos) {\n    (void) vet;\n    (void) seq;\n    (void) pos;\n    return {};\n}\n\nint subseq(vector<int> vet, vector<int> seq) {\n    (void) vet;\n    (void) seq;\n    return {};\n}\n\nvector<int> erase(vector<int> vet, vector<int> pos_list) {\n    (void) vet;\n    (void) pos_list;\n    return {};\n}\n\nvector<int> clear(vector<int> vet, int value) {\n    (void) vet;\n    (void) value;\n    return {};\n}\n\n\nvector<string> split(string str, char delim) {\n    vector<string> tokens;\n    stringstream ss(str);\n    string token;\n    while (getline(ss, token, delim))\n        tokens.push_back(token);\n    return tokens;\n}\n\nvector<int> str2vet(string str) {\n    vector<int> vet;\n    stringstream ss(str.substr(1, str.size() - 2));\n    string token;\n    while (getline(ss, token, ','))\n        vet.push_back(stoi(token));\n    return vet;\n}\n\nvoid print(vector<pair<int, int>> output) {\n    cout << \"[\";\n    for (int i = 0; i < (int) output.size(); i++) {\n        cout << \"(\" << output[i].first << \", \" << output[i].second << \")\";\n        if (i != (int) output.size() - 1)\n            cout << \", \";\n    }\n    cout << \"]\" << endl;\n}\nvoid print(vector<int> output) {\n    cout << \"[\";\n    for (int i = 0; i < (int) output.size(); i++) {\n        cout << output[i];\n        if (i != (int) output.size() - 1)\n            cout << \", \";\n    }\n    cout << \"]\" << endl;\n}\nvoid print(string output) {\n    cout << output << endl;\n}\nvoid print(int output) {\n    cout << output << endl;\n}\n\nint main(){\n \n    \n    while(true) {\n        string line;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n        auto args = split(line, ' ');\n\n        if     (args[0] == \"occurr\" ) { print(occurr(str2vet(args[1])));                   }\n        else if(args[0] == \"teams\"  ) { print(teams(str2vet(args[1])));                    }\n        else if(args[0] == \"mnext\"  ) { print(mnext(str2vet(args[1])));                    }\n        else if(args[0] == \"alone\"  ) { print(alone(str2vet(args[1])));                    }\n        else if(args[0] == \"erase\"  ) { print(erase(str2vet(args[1]), str2vet(args[2])));  }\n        else if(args[0] == \"clear\"  ) { print(clear(str2vet(args[1]), stoi(args[2])));     }\n        else if(args[0] == \"subseq\" ) { print(subseq(str2vet(args[1]), str2vet(args[2]))); }\n        else if(args[0] == \"couple\" ) { print(couple(str2vet(args[1])));                   }\n        else if(args[0] == \"end\"    ) { break;                                             }\n        else                          { print(\"Invalid command\");                          }\n    }\n}\n",
                "encoding": 0
            }
        ],
        "go": [
            {
                "name": "shell.go",
                "contents": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Pair struct {\n\tOne int\n\tTwo int\n}\n\nfunc occurr(vet []int) []Pair {\n\t_ = vet\n\treturn nil\n}\n\nfunc teams(vet []int) []Pair {\n\t_ = vet\n\treturn nil\n}\n\nfunc mnext(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc alone(vet []int) []int {\n\t_ = vet\n\treturn nil\n}\n\nfunc couple(vet []int) int {\n\t_ = vet\n\treturn 0\n}\n\nfunc hasSubseq(vet []int, seq []int, pos int) bool {\n\t_ = vet\n\t_ = seq\n\t_ = pos\n\treturn false\n}\n\nfunc subseq(vet []int, seq []int) int {\n\t_ = vet\n\t_ = seq\n\treturn -1\n}\n\nfunc erase(vet []int, posList []int) []int {\n\t_ = vet\n\t_ = posList\n\treturn nil\n}\n\nfunc clear(vet []int, value int) []int {\n\t_ = vet\n\t_ = value\n\treturn nil\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\targs := strings.Split(line, \" \")\n\t\tfmt.Println(line)\n\n\t\tswitch args[0] {\n\t\tcase \"occurr\":\n\t\t\tprintSlice(occurr(str2vet(args[1])))\n\t\tcase \"teams\":\n\t\t\tprintSlice(teams(str2vet(args[1])))\n\t\tcase \"mnext\":\n\t\t\tprintSlice(mnext(str2vet(args[1])))\n\t\tcase \"alone\":\n\t\t\tprintSlice(alone(str2vet(args[1])))\n\t\tcase \"erase\":\n\t\t\tprintSlice(erase(str2vet(args[1]), str2vet(args[2])))\n\t\tcase \"clear\":\n\t\t\tval, _ := strconv.Atoi(args[2])\n\t\t\tprintSlice(clear(str2vet(args[1]), val))\n\t\tcase \"subseq\":\n\t\t\tfmt.Println(subseq(str2vet(args[1]), str2vet(args[2])))\n\t\tcase \"couple\":\n\t\t\tfmt.Println(couple(str2vet(args[1])))\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"Invalid command\")\n\t\t}\n\t}\n}\n\n// Fun\u00e7\u00f5es auxiliares\n\nfunc str2vet(str string) []int {\n\tif str == \"[]\" {\n\t\treturn nil\n\t}\n\tstr = str[1 : len(str)-1]\n\tparts := strings.Split(str, \",\")\n\tvar vet []int\n\tfor _, part := range parts {\n\t\tnum, _ := strconv.Atoi(strings.TrimSpace(part))\n\t\tvet = append(vet, num)\n\t}\n\treturn vet\n}\n\nfunc printSlice[T any](vet []T) {\n\tfmt.Print(\"[\")\n\tfor i, x := range vet {\n\t\tif i > 0 {\n\t\t\tfmt.Print(\", \")\n\t\t}\n\t\tfmt.Print(x)\n\t}\n\tfmt.Println(\"]\")\n}\n\nfunc (p Pair) String() string {\n\treturn fmt.Sprintf(\"(%v, %v)\", p.One, p.Two)\n}\n",
                "encoding": 0
            }
        ]
    }
}
