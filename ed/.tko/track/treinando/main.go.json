{
    "patches": [
        {
            "label": "2025-04-16_14-26-18",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc __tostr(vet []int) string {\n\tif len(vet) == 0 {\n\t\treturn \"\"\n\t}\n\n\tif len(vet) == 1 {\n\t\treturn fmt.Sprint(vet[0])\n\t}\n\n\treturn fmt.Sprint(vet[0]) + \", \" + __tostr(vet[1:])\n\t\n\t\n} \n\nfunc tostr(vet []int) string {\n\t\n\tcoisa := __tostr(vet)\n\treturn \"[\" + coisa + \"]\"\n\n}\n\nfunc __tostrrev(vet []int) string {\n\tif len(vet) == 0 {\n\t\treturn \"\"\n\t}\n\n\tif len(vet) == 1 {\n\t\treturn fmt.Sprint(vet[0])\n\t}\n\n\treturn fmt.Sprint(vet[len(vet)-1]) + \", \" + __tostrrev(vet[:len(vet)-1])\n}\n\nfunc tostrrev(vet []int) string {\n\treturn \"[\" + __tostrrev(vet) + \"]\"\n}\n\n\nfunc reverse(vet []int) {\n\tfor i, j := 0, len(vet)-1; i < j; i, j = i+1, j-1 {\n\t\tvet[i], vet[j] = vet[j], vet[i]\n\t}\n\n}\n\nfunc sum(vet []int) int {\n\tvar contador int \n\n\tfor _,elem := range vet{\n\t\tcontador += elem\n\t}\n\n\treturn contador\n}\n\nfunc mult(vet []int) int {\n\tvar multiplica int = 1\n\n\tfor _, elem := range vet{\n\t\tmultiplica *= elem\n\t}\n\n\treturn multiplica\n}\n\nfunc min(vet []int) (int, int) {\n\tif len(vet) == 0{\n\t\treturn 0 , -1\n\t}\n\n\tvar indice int = 0\n\tmenor := vet[0]\n\n\tfor i, elem := range vet{\n\t\tif elem  < menor {\n\t\t\tmenor = elem\n\t\t\tindice = i\n\t\t}\n\t}\n\t\n\treturn menor, indice\n\t\n}\n\nfunc main() {\n\tvar vet []int\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor {\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\targs := strings.Fields(line)\n\t\tfmt.Println(\"$\" + line)\n\n\t\tswitch args[0] {\n\t\tcase \"end\":\n\t\t\treturn\n\t\tcase \"read\":\n\t\t\tvet = nil\n\t\t\tfor _, arg := range args[1:] {\n\t\t\t\tif val, err := strconv.Atoi(arg); err == nil {\n\t\t\t\t\tvet = append(vet, val)\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"tostr\":\n\t\t\tfmt.Println(tostr(vet))\n\t\tcase \"torev\":\n\t\t\tfmt.Println(tostrrev(vet))\n\t\tcase \"reverse\":\n\t\t\treverse(vet)\n\t\tcase \"sum\":\n\t\t\tfmt.Println(sum(vet))\n\t\tcase \"mult\":\n\t\t\tfmt.Println(mult(vet))\n\t\tcase \"min\":\n\t\t\t_, index := min(vet)\n\t\t\tfmt.Println(index)\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n"
        }
    ]
}