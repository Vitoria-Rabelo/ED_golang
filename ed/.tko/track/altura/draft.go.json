{
    "patches": [
        {
            "label": "2025-06-29_19-19-26",
            "content": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct {\n\tValue int\n\tLeft  *Node\n\tRight *Node\n}\n\nfunc NewNode(value int) *Node {\n\treturn &Node{\n\t\tValue: value,\n\t\tLeft:  nil,\n\t\tRight: nil,\n\t}\n}\n\ntype Btree struct {\n\tRoot *Node\n}\n\nfunc NewBTree() *Btree {\n\treturn &Btree{\n\t\tRoot: nil,\n\t}\n}\n\nfunc (bt *Btree) Deserialize(serial string) {\n\tscanner := bufio.NewScanner(strings.NewReader(serial))\n\tscanner.Split(bufio.ScanWords)\n\tbt.Root = deserialize(scanner)\n}\n\nfunc deserialize(scanner *bufio.Scanner) *Node {\n\tif !scanner.Scan() {\n\t\treturn nil\n\t}\n\ttoken := scanner.Text()\n\tif token == \"#\" {\n\t\treturn nil\n\t}\n\tvalue, err := strconv.Atoi(token)\n\tif err != nil {\n\t\treturn nil\n\t}\n\tnode := NewNode(value)\n\tnode.Left = deserialize(scanner)\n\tnode.Right = deserialize(scanner)\n\treturn node\n}\n\nfunc (bt * Btree) Find(value int) *Node{\n    return find(bt.Root, value)\n} \n\nfunc find(node * Node, value int) *Node{\n    if node == nil{\n        return nil\n    }\n\n    if node.Value == value{\n        return node\n    }\n\n    aux := find(node.Left, value) \n    if aux != nil{\n        return aux\n    }\n\n    return find(node.Right, value)\n}\n\nfunc (bt * Btree) GetAltura(node * Node) int{\n    if node == nil{\n        return 0\n    }\n\n    leftHeight := bt.GetAltura(node.Left)\n    rightHeight := bt.GetAltura(node.Right)\n    if leftHeight > rightHeight {\n\t\treturn leftHeight + 1\n\t}\n    return rightHeight + 1\n} \n\nfunc (bt * Btree) GetProfundidade(node * Node) int{\n    return getProfundidade(bt.Root, node, 0)\n}\n\nfunc getProfundidade(temp, aux * Node, profundidade int) int{\n    if temp == nil{\n        return 0\n    }\n\n    if temp == aux{\n        return profundidade + 1\n    }\n\n    aux2 := getProfundidade(temp.Left, aux, profundidade + 1)\n    if aux2 != 0{\n        return aux2\n    }\n    return getProfundidade(temp.Right, aux, profundidade + 1)\n}\n\nfunc main() {\n    scanner := bufio.NewScanner(os.Stdin)\n    scanner.Scan()\n\tserial := scanner.Text()\n    bt := NewBTree()\n    bt.Deserialize(serial)\n\n    scanner.Scan()\n\tvaluesStr := scanner.Text()\n\tvalues := strings.Fields(valuesStr)\n\n    for _, valStr := range values {\n\t\tval, err := strconv.Atoi(valStr)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"-1\")\n\t\t\tcontinue\n\t\t}\n\t\tnode := bt.Find(val)\n\t\tif node == nil {\n\t\t\tfmt.Println(\"-1\")\n\t\t} else {\n\t\t\taltura := bt.GetAltura(node)\n\t\t\tprofundidade := bt.GetProfundidade(node)\n\t\t\tfmt.Printf(\"%d %d\\n\", altura, profundidade)\n\t\t}\n\t}\n    \n}\n",
            "lines": "139"
        }
    ]
}