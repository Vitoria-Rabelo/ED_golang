{
    "patches": [
        {
            "label": "2025-05-20_11-19-42",
            "content": "\nfunc toString(node * Node) string{\n\tif node == nil {\n\t\treturn \"[]\"\n\t}\n\telementos := \"[\"\n    current := node\n    first := true\n    \n    for current != nil {\n        if !first {\n            elementos += \", \"\n        }\n        elementos += fmt.Sprint(current.value)\n        current = current.next\n        first = false\n    }\n    \n    elementos += \"]\"\n    return elementos\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n// \tll := NewLList[int]()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\t// fmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\t// fmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\t// for _, v := range args[1:] {\n\t\t\t// \tnum, _ := strconv.Atoi(v)\n\t\t\t// \tll.PushBack(num)\n\t\t\t// }\n\t\tcase \"clear\":\n\t\t\t// ll.Clear()\n\t\tcase \"forward\":\n\t\t\t// search, _ := strconv.Atoi(args[1])\n\t\t\t// steps, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(search)\n\t\t\t// if node == nil {\n\t\t\t// \tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t// \tcontinue\n\t\t\t// }\n\t\t\t// collect := []string{}\n\t\t\t// for range steps {\n\t\t\t// \tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t// \tnode = node.Next()\n\t\t\t// }\n\t\t\t// fmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"backward\":\n\t\t\t// search, _ := strconv.Atoi(args[1])\n\t\t\t// steps, _ := strconv.Atoi(args[2])\n\t\t\t// node := ll.Search(search)\n\t\t\t// if node == nil {\n\t\t\t// \tfmt.Println(\"fail: valor n\u00e3o encontrado\")\n\t\t\t// \tcontinue\n\t\t\t// }\n\t\t\t// collect := []string{}\n\t\t\t// for range steps {\n\t\t\t// \tcollect = append(collect, fmt.Sprintf(\"%v\", node.Value))\n\t\t\t// \tnode = node.Prev()\n\t\t\t// }\n\t\t\t// fmt.Printf(\"[ %s ]\\n\", strings.Join(collect, \" \"))\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n"
        }
    ]
}