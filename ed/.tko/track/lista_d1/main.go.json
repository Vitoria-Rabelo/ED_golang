{
    "patches": [
        {
            "label": "2025-05-20_10-18-50",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"strconv\"\n)\n\ntype Node struct{\n\tvalue int\n\tnext *Node\n}\n\ntype List struct{\n\thead *Node\n}\n\nfunc NewNode(value int, next *Node) *Node{\n\treturn &Node{\n\t\tvalue: value,\n\t\tnext: next,\n\t}\n}\n\nfunc NewList() *List{\n\treturn &List{\n\t\thead: nil,\n\t}\n}\n\nfunc pushBack(node *Node, value int) *Node{\n\tif node == nil{\n\t\tnovo := NewNode(value, nil)\n\t\treturn novo\n\t}\n\n\tnode.next = pushBack(node.next, value)\n\treturn node \n}\n\nfunc popBack (node *Node) *Node{\n\tif node == nil{\n\t\treturn nil\n\t}\n\n\tif node.next == nil{\n\t\treturn nil\n\t}\n\n\t if node.next.next == nil {\n        node.next = nil\n        return node\n    }\n\n\tnode.next = popBack(node.next)\n\treturn node \n}\n\nfunc (l * List) PushBack(value int){\n\tl.head = pushBack(l.head, value)\n}\nfunc (l * List) PopBack(){\n\t if l.head == nil {\n        return\n    }\n\n     if l.head.next == nil {\n        l.head = nil\n        return\n    }\n\n\tl.head = popBack(l.head)\n}\n\nfunc toString(node * Node) string{\n\tif node == nil {\n\t\treturn \"[]\"\n\t}\n\telementos := \"[\"\n    current := node\n    first := true\n    \n    for current != nil {\n        if !first {\n            elementos += \", \"\n        }\n        elementos += fmt.Sprint(current.value)\n        current = current.next\n        first = false\n    }\n    \n    elementos += \"]\"\n    return elementos\n}\n\nfunc size(node * Node) int {\n\tif node == nil{\n\t\treturn 0\n\t}\n\n\treturn 1 + size(node.next)\n}\n\nfunc (l * List) Size() int{\n\treturn size(l.head)\n}\n\nfunc (l *List) PushFront(value int) {\n\tl.head = NewNode(value, l.head)\n}\n\nfunc (l * List) PopFront() {\n\tif l.head != nil {\n\t\tl.head = l.head.next\n\t}\n}\n\nfunc (l *List) Clear() {\n\tl.head = nil\n}\n\nfunc (l * List) String() string{\n\treturn toString(l.head)\n}\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n \tll := NewList()\n\n\tfor {\n\t\tfmt.Print(\"$\")\n\t\tif !scanner.Scan() {\n\t\t\tbreak\n\t\t}\n\t\tline := scanner.Text()\n\t\tfmt.Println(line)\n\t\targs := strings.Fields(line)\n\n\t\tif len(args) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tcmd := args[0]\n\n\t\tswitch cmd {\n\t\tcase \"show\":\n\t\t\tfmt.Println(ll.String())\n\t\tcase \"size\":\n\t\t\tfmt.Println(ll.Size())\n\t\tcase \"push_back\":\n\t\t\tfor _, v := range args[1:] {\n\t\t\t\tnum, _ := strconv.Atoi(v)\n\t\t\t\tll.PushBack(num)\n\t\t\t}\n\t\tcase \"push_front\":\n\t\t\t for _, v := range args[1:] {\n\t\t\t\tnum, _ := strconv.Atoi(v)\n\t\t\t\tll.PushFront(num)\n\t\t\t }\n\t\tcase \"pop_back\":\n\t\t\t ll.PopBack()\n\t\tcase \"pop_front\":\n\t\t\tll.PopFront()\n\t\tcase \"clear\":\n\t\t\tll.Clear()\n\t\tcase \"end\":\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"fail: comando invalido\")\n\t\t}\n\t}\n}\n"
        }
    ]
}