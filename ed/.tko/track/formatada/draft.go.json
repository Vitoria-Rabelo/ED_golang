{
    "patches": [
        {
            "label": "2025-06-13_22-55-22",
            "content": "@@ -1,74 +1,144 @@\n-package main%0A%0Aimport (%0A%09%22bufio%22%0A%09%22fmt%22%0A%09%22os%22%0A%09%22strconv%22%0A%09%22strings%22%0A)%0A%0A\n+@@ -10,1579 +10,59 @@%0A ain%250A%0A-%250A%0A import %0A-(%250A%2509%2522bufio%2522%250A%2509%2522fmt%2522%250A%2509%2522os%2522%250A%2509%2522strconv%2522%250A%2509%2522strings%2522%250A)%250A%250A\n type\n@@ -150,19 +150,25 @@\n  struct \n-%7B%0A%09\n+%257B%250A%2509\n Value in\n@@ -168,18 +168,22 @@\n alue int\n-%0A%09\n+%250A%2509\n Left  *N\n@@ -185,18 +185,22 @@\n t  *Node\n-%0A%09\n+%250A%2509\n Right *N\n@@ -198,28 +198,36 @@\n 9Right *Node\n-%0A%7D%0A%0A\n+%250A%257D%250A%250A\n func NewNode\n@@ -244,19 +244,25 @@\n ) *Node \n-%7B%0A%09\n+%257B%250A%2509\n return &\n@@ -265,20 +265,28 @@\n rn &Node\n-%7B%0A%09%09\n+%257B%250A%2509%2509\n Value: v\n@@ -290,19 +290,25 @@\n : value,\n-%0A%09%09\n+%250A%2509%2509\n Left:  n\n@@ -310,19 +310,25 @@\n t:  nil,\n-%0A%09%09\n+%250A%2509%2509\n Right: n\n@@ -330,23 +330,37 @@\n ht: nil,\n-%0A%09%7D%0A%7D%0A%0A\n+%250A%2509%257D%250A%257D%250A%250A\n type BTr\n@@ -369,19 +369,25 @@\n  struct \n-%7B%0A%09\n+%257B%250A%2509\n Root *No\n@@ -388,20 +388,28 @@\n ot *Node\n-%0A%7D%0A%0A\n+%250A%257D%250A%250A\n func New\n@@ -423,19 +423,25 @@\n  *BTree \n-%7B%0A%09\n+%257B%250A%2509\n return &\n@@ -449,29 +449,51 @@\n Tree\n-%7B%0A%09%09Root: nil,%0A%09%7D%0A%7D%0A%0A\n+%257B%250A%2509%2509Root: nil,%250A%2509%257D%250A%257D%250A%250A\n func\n@@ -532,19 +532,25 @@\n string) \n-%7B%0A%09\n+%257B%250A%2509\n scanner \n@@ -595,18 +595,22 @@\n serial))\n-%0A%09\n+%250A%2509\n scanner.\n@@ -631,18 +631,22 @@\n anWords)\n-%0A%09\n+%250A%2509\n bt.Root \n@@ -667,20 +667,28 @@\n scanner)\n-%0A%7D%0A%0A\n+%250A%257D%250A%250A\n func des\n@@ -726,19 +726,25 @@\n ) *Node \n-%7B%0A%09\n+%257B%250A%2509\n if !scan\n@@ -754,35 +754,53 @@\n .Scan() \n-%7B%0A%09%09return nil%0A%09%7D%0A%09\n+%257B%250A%2509%2509return nil%250A%2509%257D%250A%2509\n token :=\n@@ -814,18 +814,22 @@\n r.Text()\n-%0A%09\n+%250A%2509\n if token\n@@ -836,31 +836,53 @@\n  == \n-%22#%22 %7B%0A%09%09return nil%0A%09%7D%0A%09\n+%2522#%2522 %257B%250A%2509%2509return nil%250A%2509%257D%250A%2509\n valu\n@@ -910,18 +910,22 @@\n i(token)\n-%0A%09\n+%250A%2509\n if err !\n@@ -934,27 +934,45 @@\n nil \n-%7B%0A%09%09return nil%0A%09%7D%0A%09\n+%257B%250A%2509%2509return nil%250A%2509%257D%250A%2509\n node\n@@ -989,18 +989,22 @@\n e(value)\n-%0A%09\n+%250A%2509\n node.Lef\n@@ -1027,18 +1027,22 @@\n scanner)\n-%0A%09\n+%250A%2509\n node.Rig\n@@ -1066,18 +1066,22 @@\n scanner)\n-%0A%09\n+%250A%2509\n return n\n@@ -1087,67 +1087,840 @@\n node\n-%0A%7D%0A%0Afunc (bt * Btree) Soma() int%7B%0A%09return soma(bt.Root)%0A%7D%0A%0A\n+%250A%257D%250A%250Afunc (bt *BTree) PrintInOrderWithIndent() %257B%250A%2509printInOrderWithNulls(bt.Root, 0)%250A%257D%250A%250Afunc printInOrderWithNulls(node *Node, depth int) %257B%250A%2509if node == nil %257B%250A%2509%2509return%250A%2509%257D%250A%2509if node.Left != nil %257B%250A%2509%2509printInOrderWithNulls(node.Left, depth+1)%250A%2509%257D else if node.Right != nil %257B%250A%2509%250A%2509%2509for i := 0; i %253C depth+1; i++ %257B%250A%2509%2509%2509fmt.Print(%2522....%2522)%250A%2509%2509%257D%250A%2509%2509fmt.Println(%2522#%2522)%250A%2509%257D%250A%2509%250A%2509for i := 0; i %253C depth; i++ %257B%250A%2509%2509fmt.Print(%2522....%2522)%250A%2509%257D%250A%2509fmt.Println(node.Value)%250A    %2509if node.Right != nil %257B%250A%2509%2509printInOrderWithNulls(node.Right, depth+1)%250A%2509%257D else if node.Left != nil %257B%250A%2509%2509for i := 0; i %253C depth+1; i++ %257B%250A%2509%2509%2509fmt.Print(%2522....%2522)%250A%2509%2509%257D%250A%2509%2509fmt.Println(%2522#%2522)%250A%2509%257D%250A%257D%250A%250A\n func\n@@ -1931,11 +1931,17 @@\n n() \n-%7B%0A%09\n+%257B%250A%2509\n scan\n@@ -1973,18 +1973,22 @@\n s.Stdin)\n-%0A%09\n+%250A%2509\n scanner.\n@@ -1993,18 +1993,22 @@\n r.Scan()\n-%0A%09\n+%250A%2509\n line := \n@@ -2025,11 +2025,17 @@\n xt()\n-%0A%0A%09\n+%250A%250A%2509\n bt :\n@@ -2046,18 +2046,22 @@\n wBTree()\n-%0A%09\n+%250A%2509\n bt.Deser\n@@ -2076,10 +2076,14 @@\n ine)\n-%0A%09\n+%250A%2509\n bt.P\n@@ -2109,6 +2109,81 @@\n nt()\n+%250A%257D%0A+%2522fmt%2522%250Afunc main() %257B%250A    fmt.Println(%2522qxcode%2522)%250A%257D%250A\n %0A\n-%7D\n",
            "lines": "6"
        },
        {
            "label": "2025-06-29_12-15-15",
            "content": "@@ -79,16 +79,17 @@\n e struct\n+ \n %7B%0A%09Value\n@@ -99,16 +99,17 @@\n t%0A%09Left \n+ \n *Node%0A%09R\n@@ -126,41 +126,8 @@\n %0A%7D%0A%0A\n-type Tree struct%7B%0A%09Root *Node%0A%7D%0A%0A\n func\n@@ -151,16 +151,17 @@\n t) *Node\n+ \n %7B%0A%09retur\n@@ -192,16 +192,17 @@\n %0A%09%09Left:\n+ \n  nil,%0A%09%09\n@@ -219,24 +219,59 @@\n ,%0A%09%7D%0A%7D%0A%0A\n+type BTree struct %7B%0A%09Root *Node%0A%7D%0A%0A\n func New\n Tree() *\n@@ -266,16 +266,17 @@\n  New\n+B\n Tree() *\n Tree\n@@ -271,20 +271,22 @@\n Tree() *\n+B\n Tree\n+ \n %7B%0A%09retur\n@@ -288,16 +288,17 @@\n return &\n+B\n Tree%7B%0A%09%09\n@@ -320,22 +320,21 @@\n %0A%0Afunc (\n+b\n t\n-ree\n  *\n+B\n Tree) De\n@@ -449,20 +449,18 @@\n Words)%0A%09\n+b\n t\n-ree\n .Root = \n@@ -529,16 +529,17 @@\n r) *Node\n+ \n %7B%0A%09if !s\n@@ -570,17 +570,16 @@\n  nil%0A%09%7D%0A\n-%0A\n %09token :\n@@ -641,18 +641,16 @@\n lue, err\n-or\n  := strc\n@@ -672,18 +672,16 @@\n %0A%09if err\n-or\n  != nil \n@@ -700,16 +700,19 @@\n il%0A%09%7D%0A%09n\n+ode\n  := NewN\n@@ -724,16 +724,19 @@\n alue)%0A%09n\n+ode\n .Left = \n@@ -758,16 +758,19 @@\n nner)%0A%09n\n+ode\n .Right =\n@@ -800,17 +800,19 @@\n return n\n-%0A\n+ode\n %0A%7D%0A%0Afunc\n@@ -817,509 +817,53 @@\n nc (\n+b\n t\n-ree\n  * \n-T\n+Bt\n ree) S\n-how()%7B%0A%09show(tree.Root, 0)%0A%7D%0A%0Afunc show(node * Node, d\n+oma()\n  int\n-)\n %7B%0A%09\n-if node == nil%7B%0A%09%09return%0A%09%7D%0A%0A%09if node.Left != nil%7B%0A%09%09show(node.Left, d + 1)%0A%09%7D else if node.Right != nil%7B%0A%09%09for i := 0; i %3C d + 1; i++%7B%0A%09%09%09fmt.Print(%22....%22)%0A%09%09%7D%0A%09%09fmt.Println(%22#%22)%0A%09%7D%0A%0A%09for i := 0; i %3C d ; i++ %7B%0A%09%09fmt.Print(%22....%22)%0A%09%7D%0A%09fmt.Println(node.Value)%0A    %09if node.Right != nil %7B%0A%09%09%09show(node.Right, d + 1)%0A%09%09%7Delse if node.Left != nil %7B%0A%09%09%09for i := 0; i %3C d+1; i++ %7B%0A%09%09%09%09fmt.Print(%22....%22)%0A%09%09%09%7D%0A%09%09%09fmt.Println(%22#%22)%0A%09%09%7D%0A\n+return soma(bt.Root)\n %0A%7D%0A%0A\n@@ -873,16 +873,17 @@\n c main()\n+ \n %7B%0A%09scann\n@@ -932,21 +932,20 @@\n Scan()%0A%09\n+l\n in\n-put\n+e\n  := scan\n@@ -961,27 +961,26 @@\n )%0A%0A%09\n+b\n t\n-ree\n  := New\n+B\n Tree()%0A%09\n tree\n@@ -975,20 +975,18 @@\n Tree()%0A%09\n+b\n t\n-ree\n .Deseria\n@@ -994,25 +994,40 @@\n ize(\n+l\n in\n-put)%0A%09tree.Show\n+e)%0A%09bt.PrintInOrderWithIndent\n ()%0A%7D\n",
            "lines": "71"
        },
        {
            "label": "2025-06-29_12-15-49",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Node struct{\n\tValue int\n\tLeft *Node\n\tRight *Node\n}\n\ntype Tree struct{\n\tRoot *Node\n}\n\nfunc NewNode(value int) *Node{\n\treturn &Node{\n\t\tValue: value,\n\t\tLeft: nil,\n\t\tRight: nil,\n\t}\n}\n\nfunc NewTree() *Tree{\n\treturn &Tree{\n\t\tRoot: nil,\n\t}\n}\n\nfunc (tree *Tree) Deserialize(serial string) {\n\tscanner := bufio.NewScanner(strings.NewReader(serial))\n\tscanner.Split(bufio.ScanWords)\n\ttree.Root = deserialize(scanner)\n}\n\nfunc deserialize(scanner *bufio.Scanner) *Node{\n\tif !scanner.Scan() {\n\t\treturn nil\n\t}\n\n\ttoken := scanner.Text()\n\tif token == \"#\" {\n\t\treturn nil\n\t}\n\tvalue, error := strconv.Atoi(token)\n\tif error != nil {\n\t\treturn nil\n\t}\n\tn := NewNode(value)\n\tn.Left = deserialize(scanner)\n\tn.Right = deserialize(scanner)\n\treturn n\n\n}\n\nfunc (tree * Tree) Show(){\n\tshow(tree.Root, 0)\n}\n\nfunc show(node * Node, d int){\n\tif node == nil{\n\t\treturn\n\t}\n\n\tif node.Left != nil{\n\t\tshow(node.Left, d + 1)\n\t} else if node.Right != nil{\n\t\tfor i := 0; i < d + 1; i++{\n\t\t\tfmt.Print(\"....\")\n\t\t}\n\t\tfmt.Println(\"#\")\n\t}\n\n\tfor i := 0; i < d ; i++ {\n\t\tfmt.Print(\"....\")\n\t}\n\tfmt.Println(node.Value)\n    \tif node.Right != nil {\n\t\t\tshow(node.Right, d + 1)\n\t\t}else if node.Left != nil {\n\t\t\tfor i := 0; i < d+1; i++ {\n\t\t\t\tfmt.Print(\"....\")\n\t\t\t}\n\t\t\tfmt.Println(\"#\")\n\t\t}\n\n}\n\nfunc main(){\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Scan()\n\tinput := scanner.Text()\n\n\ttree := NewTree()\n\ttree.Deserialize(input)\n\ttree.Show()\n}",
            "lines": "102"
        }
    ]
}