{
    "patches": [
        {
            "label": "2025-05-31_16-07-29",
            "content": "@@ -438,16 +438,112 @@\n rn true%0A\n+%09/* Essa fun%C3%A7%C3%A3o retorna uma booleana que%0A%09   diz se a posi%C3%A7%C3%A3o p est%C3%A1 dentro da%0A%09   matriz mat */\n %0A%7D%0A%0A// F\n@@ -666,41 +666,29 @@\n ()%0A%09\n-nl := len(mat)%0A%09nc := len(mat%5B0%5D)\n+_ , _ , _ = mat, l, c\n %0A%0A%09/\n"
        },
        {
            "label": "2025-05-31_16-09-03",
            "content": "@@ -566,16 +566,17 @@\n Pos%5D()%0A%09\n+n\n l := len\n@@ -582,16 +582,17 @@\n n(mat)%0A%09\n+n\n c := len\n"
        },
        {
            "label": "2025-05-31_16-09-09",
            "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\ntype Pos struct {\n\tl int\n\tc int\n}\n\n// Retorna os vizinhos (acima, abaixo, esquerda, direita)\nfunc getNeib(p Pos) []Pos {\n\treturn []Pos{\n\t\t{p.l - 1, p.c},\n\t\t{p.l + 1, p.c},\n\t\t{p.l, p.c - 1},\n\t\t{p.l, p.c + 1},\n\t}\n}\n\n// Verifica se a posi\u00e7\u00e3o est\u00e1 dentro da matriz\nfunc inside(mat [][]rune, p Pos) bool {\n\tif p.l < 0 || p.c < 0 || p.l >= len(mat) || p.c >= len(mat[0]){\n\t\treturn false\n\t}\n\treturn true\n\n}\n\n// Fun\u00e7\u00e3o para propagar a \"chama\" (substitui '#' por 'o')\nfunc queimar(mat [][]rune, l, c int) {\n\tstack := NewStack[Pos]()\n\tl := len(mat)\n\tc := len(mat[0])\n\n\t// Essa fun\u00e7\u00e3o deve usar uma list como pilha\n\t// e marcar as \u00e1rvores na matriz como\n\t// queimados\n\t// Uma sugest\u00e3o de como fazer isso \u00e9:\n\t// - adicionar a primeira posi\u00e7\u00e3o na pilha se poss\u00edvel tocar fogo nele\n\t// - enquanto a pilha n\u00e3o estiver vazia:\n\t//   - pegar o elemento do topo\n\t//   - ver se tem algum de seus vizinhos que pode ser queimado\n\t//   - se sim, tocar fogo nele e adicionar na pilha\n\t//   - se n\u00e3o, remover o elemento do topo da pilha\n}\n\nfunc main() {\n\tvar nl, nc, l, c int\n\tfmt.Scan(&nl, &nc, &l, &c)\n\n\tmat := make([][]rune, nl)\n\tscanner := bufio.NewScanner(os.Stdin)\n\tscanner.Split(bufio.ScanLines)\n\n\tfor i := 0; i < nl; {\n\t\tif scanner.Scan() {\n\t\t\tline := scanner.Text()\n\t\t\tif len(line) == nc {\n\t\t\t\tmat[i] = []rune(line)\n\t\t\t\ti++\n\t\t\t}\n\t\t}\n\t}\n\n\tqueimar(mat, l, c)\n\tshowMat(mat)\n}\n\nfunc showMat(mat [][]rune) {\n\tfor _, row := range mat {\n\t\tfmt.Println(string(row))\n\t}\n}\n"
        }
    ]
}