{
    "patches": [
        {
            "label": "2025-07-12_18-16-27",
            "content": "@@ -166,17 +166,15 @@\n t %7B%0A\n-  \n+%09\n queue \n-*\n list\n@@ -217,18 +217,17 @@\n ue%5BT%5D %7B%0A\n-  \n+%09\n return &\n@@ -240,19 +240,18 @@\n T%5D%7B%0A\n-    \n+%09%09\n queue: \n+*\n list\n@@ -262,10 +262,9 @@\n (),%0A\n-  \n+%09\n %7D%0A%7D%0A\n",
            "lines": "41"
        },
        {
            "label": "2025-07-12_18-18-15",
            "content": "package main\n\nimport (\n\t\"container/list\"\n)\n\n// Implmenta\u00e7\u00e3o de uma fila gen\u00e9rica usando a lista duplamente encadeada do pacote container/list\ntype Queue[T any] struct {\n  queue *list.List\n}\n\nfunc NewQueue[T any]() *Queue[T] {\n  return &Queue[T]{\n    queue: list.New(),\n  }\n}\nfunc (q *Queue[T]) Enqueue(value T) {\n\tq.queue.PushBack(value)\n}\nfunc (q *Queue[T]) Dequeue() (T, bool) {\n\telement := q.queue.Front()\n\tif element == nil {\n\t\tvar zero T\n\t\treturn zero, false\n\t}\n\tq.queue.Remove(element)\n\tvalue := element.Value.(T)\n\treturn value, true\n}\nfunc (q *Queue[T]) Peek() (T, bool) {\n\telement := q.queue.Front()\n\tif element == nil {\n\t\tvar zero T\n\t\treturn zero, false\n\t}\n\tvalue := element.Value.(T)\n\treturn value, true\n}\nfunc (q *Queue[T]) IsEmpty() bool {\n\treturn q.queue.Len() == 0\n}\n",
            "lines": "41"
        }
    ]
}