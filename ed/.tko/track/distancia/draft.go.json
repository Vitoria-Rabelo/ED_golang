{
    "patches": [
        {
            "label": "2025-07-04_10-37-34",
            "content": "@@ -6,17 +6,16 @@\n ge main%0A\n-%0A\n import %22\n@@ -23,1254 +23,46 @@\n mt%22%0A\n-%0A\n func ma\n-x(a, b int) int%7B%0A    if a %3E b %7B%0A        return a%0A    %7D%0A    return b%0A%7D%0A%0Afunc min(a, b int)int%7B%0A    if a %3C b %7B%0A        return a%0A    %7D%0A    return b%0A%7D%0A%0Afunc backtracking(seq %5B%5Dbyte, pos int, d byte, L int) bool %7B%0A    for r := max(0, pos-L); r %3C pos; r++ %7B%0A        if seq%5Br%5D == d %7B%0A            return false%0A        %7D%0A    %7D%0A    for z := pos + 1; z %3C= min(len(seq)-1, pos+L); z++ %7B%0A        if seq%5Bz%5D == d %7B%0A            return false%0A        %7D%0A    %7D%0A    return true%0A%7D%0A%0Afunc distancia(seq %5B%5Dbyte, L int) bool%7B%0A    for i := 0; i %3C len(seq); i++ %7B%0A        if seq%5Bi%5D == '.' %7B%0A            for j := 0; j %3C= L; j++ %7B%0A                d := byte(j + '0')%0A                if backtracking(seq, i, d, L) %7B%0A                    seq%5Bi%5D = d%0A                    if distancia(seq, L) %7B%0A                        return true%0A                    %7D%0A                    seq%5Bi%5D = '.'%0A                %7D%0A            %7D%0A            return false%0A        %7D%0A    %7D%0A    return true%0A%7D%0A%0Afunc main() %7B%0A    var sequencia string%0A    fmt.Scan(&sequencia)%0A%0A    var l int%0A    fmt.Scan(&l)%0A    seq := %5B%5Dbyte(sequencia)%0A    %0A    if distancia(seq, l) %7B%0A        fmt.Println(string(seq))%0A    %7D%0A    %0A    slice := make(%5B%5Dint, 0, l)%0A    for i := 0; i %3C l; i++ %7B%0A        slice = append(slice, i)%0A    \n+in() %7B%0A    fmt.Println(%22qxcode%22)%0A\n %7D%0A\n-%7D\n",
            "lines": "5"
        },
        {
            "label": "2025-07-12_20-40-47",
            "content": "package main\n\nimport \"fmt\"\n\nfunc max(a, b int) int{\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int)int{\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc backtracking(seq []byte, pos int, d byte, L int) bool {\n    for r := max(0, pos-L); r < pos; r++ {\n        if seq[r] == d {\n            return false\n        }\n    }\n    for z := pos + 1; z <= min(len(seq)-1, pos+L); z++ {\n        if seq[z] == d {\n            return false\n        }\n    }\n    return true\n}\n\nfunc distancia(seq []byte, L int) bool{\n    for i := 0; i < len(seq); i++ {\n        if seq[i] == '.' {\n            for j := 0; j <= L; j++ {\n                d := byte(j + '0')\n                if backtracking(seq, i, d, L) {\n                    seq[i] = d\n                    if distancia(seq, L) {\n                        return true\n                    }\n                    seq[i] = '.'\n                }\n            }\n            return false\n        }\n    }\n    return true\n}\n\nfunc main() {\n    var sequencia string\n    fmt.Scan(&sequencia)\n\n    var l int\n    fmt.Scan(&l)\n    seq := []byte(sequencia)\n    \n    if distancia(seq, l) {\n        fmt.Println(string(seq))\n    }\n    \n    slice := make([]int, 0, l)\n    for i := 0; i < l; i++ {\n        slice = append(slice, i)\n    }\n}",
            "lines": "68"
        }
    ]
}